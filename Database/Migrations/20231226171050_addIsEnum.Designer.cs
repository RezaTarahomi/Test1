// <auto-generated />
using System;
using Database.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CodeGenerator.Migrations
{
    [DbContext(typeof(CodeGeneratorDbContext))]
    [Migration("20231226171050_addIsEnum")]
    partial class addIsEnum
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Database.Data.Entities.Api", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Domain")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Apis");
                });

            modelBuilder.Entity("Database.Data.Entities.Entity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Domain")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Entities");
                });

            modelBuilder.Entity("Database.Data.Entities.EntityParent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<bool>("OneToOne")
                        .HasColumnType("bit");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("ParentId");

                    b.ToTable("EntityParents");
                });

            modelBuilder.Entity("Database.Data.Entities.EnumField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EnumTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnumTypeId");

                    b.ToTable("EnumFields");
                });

            modelBuilder.Entity("Database.Data.Entities.EnumType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EnumTypes");
                });

            modelBuilder.Entity("Database.Data.Entities.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<int?>("EnumTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnum")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("EnumTypeId");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("Database.Data.Entities.ObjectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApiId")
                        .HasColumnType("int");

                    b.Property<int>("Description")
                        .HasColumnType("int");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApiId");

                    b.HasIndex("ParentId");

                    b.ToTable("ObjectTypes");
                });

            modelBuilder.Entity("Database.Data.Entities.RequestParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApiId")
                        .HasColumnType("int");

                    b.Property<byte?>("AttributeType")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Filterable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Sortable")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApiId");

                    b.ToTable("RequestParameters");
                });

            modelBuilder.Entity("Database.Data.Entities.ResponseParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApiId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsList")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ObjectTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PrimitiveType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApiId");

                    b.HasIndex("ObjectTypeId");

                    b.ToTable("ResponseParameters");
                });

            modelBuilder.Entity("Database.Data.Entities.EntityParent", b =>
                {
                    b.HasOne("Database.Data.Entities.Entity", "Entity")
                        .WithMany("EntityParents")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Database.Data.Entities.Entity", "Parent")
                        .WithMany("EntityChilds")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Entity");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Database.Data.Entities.EnumField", b =>
                {
                    b.HasOne("Database.Data.Entities.EnumType", "EnumType")
                        .WithMany("EnumFields")
                        .HasForeignKey("EnumTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EnumType");
                });

            modelBuilder.Entity("Database.Data.Entities.Field", b =>
                {
                    b.HasOne("Database.Data.Entities.Entity", "Entity")
                        .WithMany("Fields")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Database.Data.Entities.EnumType", "EnumType")
                        .WithMany("Fields")
                        .HasForeignKey("EnumTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Entity");

                    b.Navigation("EnumType");
                });

            modelBuilder.Entity("Database.Data.Entities.ObjectType", b =>
                {
                    b.HasOne("Database.Data.Entities.Api", "Api")
                        .WithMany("ObjectTypes")
                        .HasForeignKey("ApiId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Database.Data.Entities.ObjectType", "Parent")
                        .WithMany("Child")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Api");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Database.Data.Entities.RequestParameter", b =>
                {
                    b.HasOne("Database.Data.Entities.Api", "Api")
                        .WithMany("RequestParameters")
                        .HasForeignKey("ApiId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Api");
                });

            modelBuilder.Entity("Database.Data.Entities.ResponseParameter", b =>
                {
                    b.HasOne("Database.Data.Entities.Api", "Api")
                        .WithMany("ResponseParameters")
                        .HasForeignKey("ApiId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Database.Data.Entities.ObjectType", "ObjectType")
                        .WithMany()
                        .HasForeignKey("ObjectTypeId");

                    b.Navigation("Api");

                    b.Navigation("ObjectType");
                });

            modelBuilder.Entity("Database.Data.Entities.Api", b =>
                {
                    b.Navigation("ObjectTypes");

                    b.Navigation("RequestParameters");

                    b.Navigation("ResponseParameters");
                });

            modelBuilder.Entity("Database.Data.Entities.Entity", b =>
                {
                    b.Navigation("EntityChilds");

                    b.Navigation("EntityParents");

                    b.Navigation("Fields");
                });

            modelBuilder.Entity("Database.Data.Entities.EnumType", b =>
                {
                    b.Navigation("EnumFields");

                    b.Navigation("Fields");
                });

            modelBuilder.Entity("Database.Data.Entities.ObjectType", b =>
                {
                    b.Navigation("Child");
                });
#pragma warning restore 612, 618
        }
    }
}
